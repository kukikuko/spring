package com.example.demo.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.demo.domain.Board;
import com.example.demo.domain.SaveTime;
import com.example.demo.repository.BoardRepository;
import com.example.demo.repository.CountryRepository;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequiredArgsConstructor
public class HomeController {
	
	private final BoardRepository boardRepository;
	private final CountryRepository countryRepository;

	@GetMapping("/")
	public String Home(Model model) {
		
		
		List<Board> boardList = boardRepository.selectAll();
		List<String> nationList = countryRepository.selectNation();
		List<String> nameList = new ArrayList<>();
		
		for(Board b : boardList) {
			if(!nameList.contains(b.getName())) {
				nameList.add(b.getName());
			}
		}
		
		model.addAttribute("boardList", boardList);
		model.addAttribute("nationList", nationList);
		model.addAttribute("nameList", nameList);
		return "index";
	}
	
	
	@PostMapping("/")
	public String search(Board board, Model model, SaveTime saveTime) {
		
		log.info(saveTime.toString());
		log.info(board.toString());
		
		List<Board> searchList = boardRepository.search(board, saveTime);
		List<Board> boardList = boardRepository.selectAll();
		List<String> nationList = countryRepository.selectNation();
		List<String> nameList = new ArrayList<>();
		
		for(Board b : boardList) {
			if(!nameList.contains(b.getName())) {
				nameList.add(b.getName());
			}
		}
		
		model.addAttribute("nationList", nationList);
		model.addAttribute("nameList", nameList);
		model.addAttribute("boardList", searchList);
		
		return "index";
	}
	
	@PostMapping("/delete")
	public String delete(@RequestParam List<Integer> no) {
		
		log.info("no {}", no);
		
		for(int i : no) {
			boardRepository.delete(i);
		}
		
		return "redirect:/";
	}
	
	@RequestMapping("/excel")
	@ResponseBody
	public void excelDownload(HttpServletRequest req
			, HttpServletResponse response) throws IOException {

			String[] arrStr = req.getParameterValues("data");
			log.info({}, arrStr);
		}
		
		
//		Workbook wb = new XSSFWorkbook();
//		Sheet sheet = wb.createSheet("첫번째 시트");
//		Row row = null;
//	    Cell cell = null;
//	    int rowNum = 0;
//	    
//	    row = sheet.createRow(rowNum++);
//        cell = row.createCell(0);
//        cell.setCellValue("아이디");
//        cell = row.createCell(1);
//        cell.setCellValue("이름");
//        cell = row.createCell(2);
//        cell.setCellValue("성별");
//        cell = row.createCell(3);
//        cell.setCellValue("국가");
//        cell = row.createCell(4);
//        cell.setCellValue("도시");
//        
//        for (int i=0; i<3; i++) {
//            row = sheet.createRow(rowNum++);
//            cell = row.createCell(0);
//            cell.setCellValue(i);
//            cell = row.createCell(1);
//            cell.setCellValue(i+"_name");
//            cell = row.createCell(2);
//            cell.setCellValue(i+"_title");
//        }
//
//        response.setContentType("ms-vnd/excel");
//        response.setHeader("Content-Disposition", "attachment;filename=example.xlsx");
//
//        wb.write(response.getOutputStream());
//        wb.close();

		
	}
	

	@RequestMapping("/combo")
	@ResponseBody
	public List combo(@RequestParam(name = "nation") String nation) {
		
		List<String> cityList = countryRepository.selectCity(nation);
		
		log.info(cityList.toString());
		
		return cityList;
		
	}
	
	public void BoardModel() {
		
	}
}
